buildscript {
    ext {
        queryDslVersion = "5.0.0"
        springCloudVersion = '2021.0.5'
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
    id 'war'
    id 'org.hidetake.ssh' version '2.10.1'
    id "com.diffplug.spotless" version "5.14.3"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'war'

group = 'art.heredium'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
ext['tomcat.version'] = '9.0.90';

bootWar {
    archiveBaseName = 'HEREDIUM'
    archiveFileName = 'ROOT.war'
    archiveVersion = '1.0'
}

bootJar {
    enabled = true
    archivesBaseName = 'Spring Boot HEREDIUM'
    archiveFileName = 'ROOT.jar'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include:'*.jar')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.hibernate:hibernate-java8:5.6.1.Final'
    implementation 'com.vladmihalcea:hibernate-types-52:2.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.13.0'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.232'
    implementation 'commons-io:commons-io:2.7'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.apache.tika:tika-core:2.4.1'
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'io.github.openfeign:feign-gson'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'p6spy:p6spy:3.9.1'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

test {
    useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl

    options.compilerArgs += [
            "-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated"
    ]
}
//querydsl 추가 끝

remotes {
    stageServer {
        host = project.properties["sshHostStage"]
        port = project.properties["sshPortStage"].toInteger()
        user = project.properties["sshUserStage"]
        password = project.properties["sshPasswordStage"]
        knownHosts = allowAnyHosts
    }
    prodServer {
        host = project.properties["sshHostProd"]
        port = project.properties["sshPortProd"].toInteger()
        user = project.properties["sshUserProd"]
        password = project.properties["sshPasswordProd"]
        knownHosts = allowAnyHosts
    }
}

task scp_stage_jar {
    doLast {
        ssh.run {
            session(remotes.stageServer) {
                final jarPath = "${project.getRootDir()}${project.properties["sshFromJarPathStage"]}/${project.properties["sshToJarFileStage"]}"
                final fromJarPath = new File(jarPath)
                final toJarPath = project.properties["sshToJarPathStage"]
                println "stage 목록에 올라간 Jar : ${fromJarPath}"

                remove "${toJarPath}/${project.properties["sshToJarFileStage"]}"
                put from: "${fromJarPath}", into: "${toJarPath}/"
//                execute "sh ${sshToJarPathProd}/restart.sh" //직접실행
                println "${toJarPath} 로 Jar 전송 완료"
            }
        }
    }
}

task scp_prod_jar {
    doLast {
        ssh.run {
            session(remotes.prodServer) {
                final jarPath = "${project.getRootDir()}${project.properties["sshFromJarPath"]}/${project.properties["sshToJarFile"]}"
                final fromJarPath = new File(jarPath)
                final toJarPath = project.properties["sshToJarPathProd"]
                println "배포 목록에 올라간 Jar : ${fromJarPath}"

                remove "${toJarPath}/${project.properties["sshToJarFile"]}"
                put from: "${fromJarPath}", into: "${toJarPath}/"
//                execute "sh ${sshToJarPathProd}/restart.sh" //직접실행
                println "${toJarPath} 로 Jar 전송 완료"
            }
        }
    }
}

spotless {
    java {
        googleJavaFormat()
        removeUnusedImports()
        importOrder('java', 'jakarta', 'javax', 'lombok', 'org.springframework', '', 'org.junit', 'art.heredium', '\\#', '\\#org.junit', '\\#art.heredium')
        target 'src/main/java/**/*.java'
        targetExclude 'build/generated/**/*.java'
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    
    format('yaml') {
        target('**/*.yaml', '**/*.yml')
        targetExclude('.idea/**/*.*', '.vscode/**/*.*')
        prettier()
    }
    
    format('xml') {
        target('**/*.xml')
        targetExclude('.idea/**/*.*', '.vscode/**/*.*')
        prettier().config(['parser': 'html', 'printWidth': 160])
    }
    
    format('md') {
        target('**/*.md')
        targetExclude('.idea/**/*.*', '.vscode/**/*.*', '.github/*.md')
        prettier().config(['parser': 'markdown', 'printWidth': 160])
    }
    
    format('json') {
        target('**/*.json')
        targetExclude('.idea/**/*.*', '.vscode/**/*.*')
        prettier()
    }
}
